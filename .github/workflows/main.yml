name: Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [
          { target: "x86_64-unknown-linux-musl", image_tag: "x86_64-musl", wheel: true, deb: true },
          { target: "i686-unknown-linux-musl", image_tag: "i686-musl", wheel: true, deb: true },
          { target: "aarch64-unknown-linux-musl", image_tag: "aarch64-musl", wheel: true, deb: true },
          { target: "armv7-unknown-linux-musleabihf", image_tag: "armv7-musleabihf", wheel: true, deb: true },
          { target: "armv7-unknown-linux-musleabi", image_tag: "armv7-musleabi", wheel: false, deb: true },
          { target: "arm-unknown-linux-musleabihf", image_tag: "arm-musleabihf", wheel: false, deb: false },
          { target: "arm-unknown-linux-musleabi", image_tag: "arm-musleabi", wheel: false, deb: false },
        ]
    container:
      image: docker://messense/rust-musl-cross:${{ matrix.platform.image_tag }}
      env:
        CFLAGS_armv7_unknown_linux_musleabihf: '-mfpu=vfpv3-d16'
    steps:
      - uses: actions/checkout@v2
      - name: Cache cargo build
        uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.platform.target }}
      - name: Build wheels - manylinux
        uses: messense/maturin-action@main
        with:
          target: ${{ matrix.platform.target }}
          manylinux: auto
          container: off
          args: --release -o dist --strip
      - name: Build wheels - musllinux
        if: matrix.platform.wheel
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          manylinux: musllinux_1_1
          container: off
          args: --release --out dist --strip
      - name: Install cargo packages
        if: matrix.platform.deb
        run: |
          which cargo-deb > /dev/null || cargo install --target `rustc -vV | grep host: | awk '{print $2}'` cargo-deb
          which cargo-generate-rpm > /dev/null || cargo install --target `rustc -vV | grep host: | awk '{print $2}'` cargo-generate-rpm
      - name: Build Debian package
        if: matrix.platform.deb
        run: cargo deb --target=${{ matrix.platform.target }} --no-build --no-strip
      - name: Build RPM package
        if: matrix.platform.deb
        run: cargo generate-rpm --target=${{ matrix.platform.target }} --payload-compress none
      - name: Upload wheels
        if: matrix.platform.wheel
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist
          if-no-files-found: error
      - name: Install upx
        working-directory: /tmp
        env:
          CC: clang
          CXX: clang++
        run: |
          set -ex
          git clone --recursive https://github.com/upx/upx.git
          cd upx
          make
          cp build/release/upx /usr/local/bin/upx
      - name: Upx compress binary
        run: upx target/${{ matrix.platform.target }}/release/aliyundrive-webdav
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.platform.target }}-bin
          path: target/${{ matrix.platform.target }}/release/aliyundrive-webdav
          if-no-files-found: error
      - name: Upload deb artifacts
        if: matrix.platform.deb
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.platform.target }}-deb
          path: target/${{ matrix.platform.target }}/debian/aliyundrive-webdav_*.deb
          if-no-files-found: error
      - name: Upload RPM artifacts
        if: matrix.platform.deb
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.platform.target }}-rpm
          path: target/${{ matrix.platform.target }}/generate-rpm/aliyundrive-webdav*.rpm
          if-no-files-found: error
      - name: Get tag
        if: "startsWith(github.ref, 'refs/tags/')"
        id: tag
        uses: dawidd6/action-get-tag@v1
      - name: Archive binary
        if: "startsWith(github.ref, 'refs/tags/')"
        run: |
          cd target/${{ matrix.platform.target }}/release
          tar czvf aliyundrive-webdav-${{ steps.tag.outputs.tag }}.${{ matrix.platform.target }}.tar.gz aliyundrive-webdav
          shasum -a 256 aliyundrive-webdav-${{ steps.tag.outputs.tag }}.${{ matrix.platform.target }}.tar.gz > aliyundrive-webdav-${{ steps.tag.outputs.tag }}.${{ matrix.platform.target }}.tar.gz.sha256
          cd -
      - name: Upload binaries to GitHub Release
        uses: softprops/action-gh-release@v1
        if: "startsWith(github.ref, 'refs/tags/')"
        with:
          files: |
            target/${{ matrix.platform.target }}/release/aliyundrive-webdav*.tar.gz*
            target/${{ matrix.platform.target }}/debian/aliyundrive-webdav_*.deb
            target/${{ matrix.platform.target }}/generate-rpm/aliyundrive-webdav*.rpm
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
          generate_release_notes: true
      - name: Remove cached deb and RPM packages
        if: matrix.platform.deb
        run: |
          rm -rf target/${{ matrix.platform.target }}/debian
          rm -rf target/${{ matrix.platform.target }}/generate-rpm

  linux-others:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - target: "armv5te-unknown-linux-musleabi"
            image_tag: "armv5te-musleabi"
            cargo_extra_args: --no-default-features --features rustls-tls
          - target: "mips-unknown-linux-musl"
            image_tag: "mips-musl"
            cargo_extra_args: --no-default-features --features native-tls-vendored
          - target: "mipsel-unknown-linux-musl"
            image_tag: "mipsel-musl"
            cargo_extra_args: --no-default-features --features native-tls-vendored
    container:
      image: docker://messense/rust-musl-cross:${{ matrix.platform.image_tag }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache cargo build
        uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.platform.target }}
      - name: Build
        env:
          RUSTFLAGS: -C target-feature=+crt-static -C link-arg=-s
        run: |
          cargo build --release --target ${{ matrix.platform.target }} ${{ matrix.platform.cargo_extra_args }}
      - name: Upx compress binary
        uses: crazy-max/ghaction-upx@v1
        with:
          version: v3.95  # v3.96 breaks mipsel, https://github.com/upx/upx/issues/504
          files: target/${{ matrix.platform.target }}/release/aliyundrive-webdav
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.platform.target }}-bin
          path: target/${{ matrix.platform.target }}/release/aliyundrive-webdav
          if-no-files-found: error
      - name: Get tag
        if: "startsWith(github.ref, 'refs/tags/')"
        id: tag
        uses: dawidd6/action-get-tag@v1
      - name: Archive binary
        if: "startsWith(github.ref, 'refs/tags/')"
        run: |
          cd target/${{ matrix.platform.target }}/release
          tar czvf aliyundrive-webdav-${{ steps.tag.outputs.tag }}.${{ matrix.platform.target }}.tar.gz aliyundrive-webdav
          shasum -a 256 aliyundrive-webdav-${{ steps.tag.outputs.tag }}.${{ matrix.platform.target }}.tar.gz > aliyundrive-webdav-${{ steps.tag.outputs.tag }}.${{ matrix.platform.target }}.tar.gz.sha256
          cd -
      - name: Upload binary to GitHub Release
        uses: softprops/action-gh-release@v1
        if: "startsWith(github.ref, 'refs/tags/')"
        with:
          files: |
            target/${{ matrix.platform.target }}/release/aliyundrive-webdav*.tar.gz*
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
          generate_release_notes: true

  release:
    name: Release
    runs-on: ubuntu-latest
    environment:
      name: PyPI
      url: https://pypi.org/project/aliyundrive-webdav/
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [ linux, macos ]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *

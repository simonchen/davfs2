name: Cross-Release

on: [push]

jobs:
  build_mips:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - target: "mips-unknown-linux-gnu"
            image_tag: "linux-mips"
            container_name: "mips-release"
          - target: "mipsel-unknown-linux-gnu"
            image_tag: "linux-mipsel-lts"
            container_name: "mipsel-release"
    steps:
    - uses: actions/checkout@v3
    - name: MIPS Little Endian x32
      run: |
          docker build . --build-arg ARCH=${{ matrix.platform.image_tag }} --build-arg HOST=${{ matrix.platform.target }} --no-cache -t ${{ matrix.platform.target }} --file Dockerfile
          docker run --name ${{ matrix.platform.container_name }} ${{ matrix.platform.target }} 
          #docker ps -a
          docker cp ${{ matrix.platform.container_name }}:/work/${{ matrix.platform.target }} .
    - name: Install upx
      working-directory: /tmp
      env:
        CC: clang
        CXX: clang++
      run: |
        set -ex
        git clone --recursive https://github.com/upx/upx.git
        cd upx
        make
        cp build/release/upx /usr/local/bin/upx
    - name: Upx compress binary
      run: |
        upx ./release/mount.davfs
        upx ./release/umount.davfs
    - name: Upload binary artifacts
      uses: actions/upload-artifact@v3
      with:
          name: mipsel-unknown-linux-gnu-bin
          path: ./${{ matrix.platform.target }}/
          if-no-files-found: error
    - name: Archive binary
      if: "startsWith(github.ref, 'refs/tags/')"
      run: |
        cd ./${{ matrix.platform.target }}
        tar -czvf ../${{ matrix.platform.target }}-bin.tar.gz -C ./ .
        cd -
    - name: Upload binary to GitHub Release
      uses: softprops/action-gh-release@v1
      if: "startsWith(github.ref, 'refs/tags/')"
      with:
        files: ./${{ matrix.platform.target }}-bin.tar.gz
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
        generate_release_notes: true

    #- name: MIPS Big Endian x32
    #  if: success()
    #  run: |
    #      docker build . --build-arg ARCH=mips --build-arg HOST=mipsel-unknown-linux-gnu -t mips-linux-gnu --file Dockerfile
    #      docker run mipsel-linux-gnu > mipsel-lts-linux-gnu
    #      chmod +x mipsel-linux-gnu
    #      ./mipsel-linux-gnu bash
